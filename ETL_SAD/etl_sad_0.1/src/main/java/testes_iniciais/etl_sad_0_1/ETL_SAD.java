// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package testes_iniciais.etl_sad_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ETL_SAD Purpose: objetivo do job<br>
 * Description: Descrição do job, no caso o objetivo é exportar a mesma base em diversos formatos. <br>
 * @author user@talend.com
 * @version 7.0.1.20180411_1414
 * @status 
 */
public class ETL_SAD implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(template_ETL_SAD_RowSeparator != null){
				
					this.setProperty("template_ETL_SAD_RowSeparator", template_ETL_SAD_RowSeparator.toString());
				
			}
			
			if(template_ETL_SAD_Encoding != null){
				
					this.setProperty("template_ETL_SAD_Encoding", template_ETL_SAD_Encoding.toString());
				
			}
			
			if(template_ETL_SAD_File != null){
				
					this.setProperty("template_ETL_SAD_File", template_ETL_SAD_File.toString());
				
			}
			
			if(template_ETL_SAD_FieldSeparator != null){
				
					this.setProperty("template_ETL_SAD_FieldSeparator", template_ETL_SAD_FieldSeparator.toString());
				
			}
			
		}

public String template_ETL_SAD_RowSeparator;
public String getTemplate_ETL_SAD_RowSeparator(){
	return this.template_ETL_SAD_RowSeparator;
}
public String template_ETL_SAD_Encoding;
public String getTemplate_ETL_SAD_Encoding(){
	return this.template_ETL_SAD_Encoding;
}
		public String template_ETL_SAD_File;
		public String getTemplate_ETL_SAD_File(){
			return this.template_ETL_SAD_File;
		}
		
public String template_ETL_SAD_FieldSeparator;
public String getTemplate_ETL_SAD_FieldSeparator(){
	return this.template_ETL_SAD_FieldSeparator;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ETL_SAD";
	private final String projectName = "TESTES_INICIAIS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ETL_SAD.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ETL_SAD.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputRaw_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class saidaXMLStruct implements routines.system.IPersistableRow<saidaXMLStruct> {
    final static byte[] commonByteArrayLock_TESTES_INICIAIS_ETL_SAD = new byte[0];
    static byte[] commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[0];

	
			    public String Categoria;

				public String getCategoria () {
					return this.Categoria;
				}
				
			    public String cnpj;

				public String getCnpj () {
					return this.cnpj;
				}
				
			    public String nome_estabelecimento;

				public String getNome_estabelecimento () {
					return this.nome_estabelecimento;
				}
				
			    public String uf;

				public String getUf () {
					return this.uf;
				}
				
			    public String Cidade;

				public String getCidade () {
					return this.Cidade;
				}
				
			    public String Endereco;

				public String getEndereco () {
					return this.Endereco;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nota_estabelecimento;

				public String getNota_estabelecimento () {
					return this.nota_estabelecimento;
				}
				
			    public String perspectiva_acessibilidade;

				public String getPerspectiva_acessibilidade () {
					return this.perspectiva_acessibilidade;
				}
				
			    public String recurso_acessibilidade;

				public String getRecurso_acessibilidade () {
					return this.recurso_acessibilidade;
				}
				
			    public Boolean possui_recurso;

				public Boolean getPossui_recurso () {
					return this.possui_recurso;
				}
				
			    public String nome_usuario;

				public String getNome_usuario () {
					return this.nome_usuario;
				}
				
			    public String comentario;

				public String getComentario () {
					return this.comentario;
				}
				
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTES_INICIAIS_ETL_SAD.length) {
				if(length < 1024 && commonByteArray_TESTES_INICIAIS_ETL_SAD.length == 0) {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[1024];
				} else {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length);
			strReturn = new String(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTES_INICIAIS_ETL_SAD) {

        	try {

        		int length = 0;
		
					this.Categoria = readString(dis);
					
					this.cnpj = readString(dis);
					
					this.nome_estabelecimento = readString(dis);
					
					this.uf = readString(dis);
					
					this.Cidade = readString(dis);
					
					this.Endereco = readString(dis);
					
					this.email = readString(dis);
					
					this.nota_estabelecimento = readString(dis);
					
					this.perspectiva_acessibilidade = readString(dis);
					
					this.recurso_acessibilidade = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.possui_recurso = null;
           				} else {
           			    	this.possui_recurso = dis.readBoolean();
           				}
					
					this.nome_usuario = readString(dis);
					
					this.comentario = readString(dis);
					
					this.ano = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Categoria,dos);
					
					// String
				
						writeString(this.cnpj,dos);
					
					// String
				
						writeString(this.nome_estabelecimento,dos);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.Cidade,dos);
					
					// String
				
						writeString(this.Endereco,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.nota_estabelecimento,dos);
					
					// String
				
						writeString(this.perspectiva_acessibilidade,dos);
					
					// String
				
						writeString(this.recurso_acessibilidade,dos);
					
					// Boolean
				
						if(this.possui_recurso == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.possui_recurso);
		            	}
					
					// String
				
						writeString(this.nome_usuario,dos);
					
					// String
				
						writeString(this.comentario,dos);
					
					// String
				
						writeString(this.ano,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Categoria="+Categoria);
		sb.append(",cnpj="+cnpj);
		sb.append(",nome_estabelecimento="+nome_estabelecimento);
		sb.append(",uf="+uf);
		sb.append(",Cidade="+Cidade);
		sb.append(",Endereco="+Endereco);
		sb.append(",email="+email);
		sb.append(",nota_estabelecimento="+nota_estabelecimento);
		sb.append(",perspectiva_acessibilidade="+perspectiva_acessibilidade);
		sb.append(",recurso_acessibilidade="+recurso_acessibilidade);
		sb.append(",possui_recurso="+String.valueOf(possui_recurso));
		sb.append(",nome_usuario="+nome_usuario);
		sb.append(",comentario="+comentario);
		sb.append(",ano="+ano);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saidaXMLStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saidaJsonStruct implements routines.system.IPersistableRow<saidaJsonStruct> {
    final static byte[] commonByteArrayLock_TESTES_INICIAIS_ETL_SAD = new byte[0];
    static byte[] commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[0];

	
			    public String Categoria;

				public String getCategoria () {
					return this.Categoria;
				}
				
			    public String cnpj;

				public String getCnpj () {
					return this.cnpj;
				}
				
			    public String nome_estabelecimento;

				public String getNome_estabelecimento () {
					return this.nome_estabelecimento;
				}
				
			    public String uf;

				public String getUf () {
					return this.uf;
				}
				
			    public String Cidade;

				public String getCidade () {
					return this.Cidade;
				}
				
			    public String Endereco;

				public String getEndereco () {
					return this.Endereco;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nota_estabelecimento;

				public String getNota_estabelecimento () {
					return this.nota_estabelecimento;
				}
				
			    public String perspectiva_acessibilidade;

				public String getPerspectiva_acessibilidade () {
					return this.perspectiva_acessibilidade;
				}
				
			    public String recurso_acessibilidade;

				public String getRecurso_acessibilidade () {
					return this.recurso_acessibilidade;
				}
				
			    public Boolean possui_recurso;

				public Boolean getPossui_recurso () {
					return this.possui_recurso;
				}
				
			    public String nome_usuario;

				public String getNome_usuario () {
					return this.nome_usuario;
				}
				
			    public String comentario;

				public String getComentario () {
					return this.comentario;
				}
				
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTES_INICIAIS_ETL_SAD.length) {
				if(length < 1024 && commonByteArray_TESTES_INICIAIS_ETL_SAD.length == 0) {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[1024];
				} else {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length);
			strReturn = new String(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTES_INICIAIS_ETL_SAD) {

        	try {

        		int length = 0;
		
					this.Categoria = readString(dis);
					
					this.cnpj = readString(dis);
					
					this.nome_estabelecimento = readString(dis);
					
					this.uf = readString(dis);
					
					this.Cidade = readString(dis);
					
					this.Endereco = readString(dis);
					
					this.email = readString(dis);
					
					this.nota_estabelecimento = readString(dis);
					
					this.perspectiva_acessibilidade = readString(dis);
					
					this.recurso_acessibilidade = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.possui_recurso = null;
           				} else {
           			    	this.possui_recurso = dis.readBoolean();
           				}
					
					this.nome_usuario = readString(dis);
					
					this.comentario = readString(dis);
					
					this.ano = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Categoria,dos);
					
					// String
				
						writeString(this.cnpj,dos);
					
					// String
				
						writeString(this.nome_estabelecimento,dos);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.Cidade,dos);
					
					// String
				
						writeString(this.Endereco,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.nota_estabelecimento,dos);
					
					// String
				
						writeString(this.perspectiva_acessibilidade,dos);
					
					// String
				
						writeString(this.recurso_acessibilidade,dos);
					
					// Boolean
				
						if(this.possui_recurso == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.possui_recurso);
		            	}
					
					// String
				
						writeString(this.nome_usuario,dos);
					
					// String
				
						writeString(this.comentario,dos);
					
					// String
				
						writeString(this.ano,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Categoria="+Categoria);
		sb.append(",cnpj="+cnpj);
		sb.append(",nome_estabelecimento="+nome_estabelecimento);
		sb.append(",uf="+uf);
		sb.append(",Cidade="+Cidade);
		sb.append(",Endereco="+Endereco);
		sb.append(",email="+email);
		sb.append(",nota_estabelecimento="+nota_estabelecimento);
		sb.append(",perspectiva_acessibilidade="+perspectiva_acessibilidade);
		sb.append(",recurso_acessibilidade="+recurso_acessibilidade);
		sb.append(",possui_recurso="+String.valueOf(possui_recurso));
		sb.append(",nome_usuario="+nome_usuario);
		sb.append(",comentario="+comentario);
		sb.append(",ano="+ano);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saidaJsonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saidaExcelStruct implements routines.system.IPersistableRow<saidaExcelStruct> {
    final static byte[] commonByteArrayLock_TESTES_INICIAIS_ETL_SAD = new byte[0];
    static byte[] commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[0];

	
			    public String Categoria;

				public String getCategoria () {
					return this.Categoria;
				}
				
			    public String cnpj;

				public String getCnpj () {
					return this.cnpj;
				}
				
			    public String nome_estabelecimento;

				public String getNome_estabelecimento () {
					return this.nome_estabelecimento;
				}
				
			    public String uf;

				public String getUf () {
					return this.uf;
				}
				
			    public String Cidade;

				public String getCidade () {
					return this.Cidade;
				}
				
			    public String Endereco;

				public String getEndereco () {
					return this.Endereco;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nota_estabelecimento;

				public String getNota_estabelecimento () {
					return this.nota_estabelecimento;
				}
				
			    public String perspectiva_acessibilidade;

				public String getPerspectiva_acessibilidade () {
					return this.perspectiva_acessibilidade;
				}
				
			    public String recurso_acessibilidade;

				public String getRecurso_acessibilidade () {
					return this.recurso_acessibilidade;
				}
				
			    public Boolean possui_recurso;

				public Boolean getPossui_recurso () {
					return this.possui_recurso;
				}
				
			    public String nome_usuario;

				public String getNome_usuario () {
					return this.nome_usuario;
				}
				
			    public String comentario;

				public String getComentario () {
					return this.comentario;
				}
				
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTES_INICIAIS_ETL_SAD.length) {
				if(length < 1024 && commonByteArray_TESTES_INICIAIS_ETL_SAD.length == 0) {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[1024];
				} else {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length);
			strReturn = new String(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTES_INICIAIS_ETL_SAD) {

        	try {

        		int length = 0;
		
					this.Categoria = readString(dis);
					
					this.cnpj = readString(dis);
					
					this.nome_estabelecimento = readString(dis);
					
					this.uf = readString(dis);
					
					this.Cidade = readString(dis);
					
					this.Endereco = readString(dis);
					
					this.email = readString(dis);
					
					this.nota_estabelecimento = readString(dis);
					
					this.perspectiva_acessibilidade = readString(dis);
					
					this.recurso_acessibilidade = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.possui_recurso = null;
           				} else {
           			    	this.possui_recurso = dis.readBoolean();
           				}
					
					this.nome_usuario = readString(dis);
					
					this.comentario = readString(dis);
					
					this.ano = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Categoria,dos);
					
					// String
				
						writeString(this.cnpj,dos);
					
					// String
				
						writeString(this.nome_estabelecimento,dos);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.Cidade,dos);
					
					// String
				
						writeString(this.Endereco,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.nota_estabelecimento,dos);
					
					// String
				
						writeString(this.perspectiva_acessibilidade,dos);
					
					// String
				
						writeString(this.recurso_acessibilidade,dos);
					
					// Boolean
				
						if(this.possui_recurso == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.possui_recurso);
		            	}
					
					// String
				
						writeString(this.nome_usuario,dos);
					
					// String
				
						writeString(this.comentario,dos);
					
					// String
				
						writeString(this.ano,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Categoria="+Categoria);
		sb.append(",cnpj="+cnpj);
		sb.append(",nome_estabelecimento="+nome_estabelecimento);
		sb.append(",uf="+uf);
		sb.append(",Cidade="+Cidade);
		sb.append(",Endereco="+Endereco);
		sb.append(",email="+email);
		sb.append(",nota_estabelecimento="+nota_estabelecimento);
		sb.append(",perspectiva_acessibilidade="+perspectiva_acessibilidade);
		sb.append(",recurso_acessibilidade="+recurso_acessibilidade);
		sb.append(",possui_recurso="+String.valueOf(possui_recurso));
		sb.append(",nome_usuario="+nome_usuario);
		sb.append(",comentario="+comentario);
		sb.append(",ano="+ano);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saidaExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saidaTxtStruct implements routines.system.IPersistableRow<saidaTxtStruct> {
    final static byte[] commonByteArrayLock_TESTES_INICIAIS_ETL_SAD = new byte[0];
    static byte[] commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[0];

	
			    public String Categoria;

				public String getCategoria () {
					return this.Categoria;
				}
				
			    public String cnpj;

				public String getCnpj () {
					return this.cnpj;
				}
				
			    public String nome_estabelecimento;

				public String getNome_estabelecimento () {
					return this.nome_estabelecimento;
				}
				
			    public String uf;

				public String getUf () {
					return this.uf;
				}
				
			    public String Cidade;

				public String getCidade () {
					return this.Cidade;
				}
				
			    public String Endereco;

				public String getEndereco () {
					return this.Endereco;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nota_estabelecimento;

				public String getNota_estabelecimento () {
					return this.nota_estabelecimento;
				}
				
			    public String perspectiva_acessibilidade;

				public String getPerspectiva_acessibilidade () {
					return this.perspectiva_acessibilidade;
				}
				
			    public String recurso_acessibilidade;

				public String getRecurso_acessibilidade () {
					return this.recurso_acessibilidade;
				}
				
			    public Boolean possui_recurso;

				public Boolean getPossui_recurso () {
					return this.possui_recurso;
				}
				
			    public String nome_usuario;

				public String getNome_usuario () {
					return this.nome_usuario;
				}
				
			    public String comentario;

				public String getComentario () {
					return this.comentario;
				}
				
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTES_INICIAIS_ETL_SAD.length) {
				if(length < 1024 && commonByteArray_TESTES_INICIAIS_ETL_SAD.length == 0) {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[1024];
				} else {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length);
			strReturn = new String(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTES_INICIAIS_ETL_SAD) {

        	try {

        		int length = 0;
		
					this.Categoria = readString(dis);
					
					this.cnpj = readString(dis);
					
					this.nome_estabelecimento = readString(dis);
					
					this.uf = readString(dis);
					
					this.Cidade = readString(dis);
					
					this.Endereco = readString(dis);
					
					this.email = readString(dis);
					
					this.nota_estabelecimento = readString(dis);
					
					this.perspectiva_acessibilidade = readString(dis);
					
					this.recurso_acessibilidade = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.possui_recurso = null;
           				} else {
           			    	this.possui_recurso = dis.readBoolean();
           				}
					
					this.nome_usuario = readString(dis);
					
					this.comentario = readString(dis);
					
					this.ano = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Categoria,dos);
					
					// String
				
						writeString(this.cnpj,dos);
					
					// String
				
						writeString(this.nome_estabelecimento,dos);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.Cidade,dos);
					
					// String
				
						writeString(this.Endereco,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.nota_estabelecimento,dos);
					
					// String
				
						writeString(this.perspectiva_acessibilidade,dos);
					
					// String
				
						writeString(this.recurso_acessibilidade,dos);
					
					// Boolean
				
						if(this.possui_recurso == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.possui_recurso);
		            	}
					
					// String
				
						writeString(this.nome_usuario,dos);
					
					// String
				
						writeString(this.comentario,dos);
					
					// String
				
						writeString(this.ano,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Categoria="+Categoria);
		sb.append(",cnpj="+cnpj);
		sb.append(",nome_estabelecimento="+nome_estabelecimento);
		sb.append(",uf="+uf);
		sb.append(",Cidade="+Cidade);
		sb.append(",Endereco="+Endereco);
		sb.append(",email="+email);
		sb.append(",nota_estabelecimento="+nota_estabelecimento);
		sb.append(",perspectiva_acessibilidade="+perspectiva_acessibilidade);
		sb.append(",recurso_acessibilidade="+recurso_acessibilidade);
		sb.append(",possui_recurso="+String.valueOf(possui_recurso));
		sb.append(",nome_usuario="+nome_usuario);
		sb.append(",comentario="+comentario);
		sb.append(",ano="+ano);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saidaTxtStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TESTES_INICIAIS_ETL_SAD = new byte[0];
    static byte[] commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[0];

	
			    public String Categoria;

				public String getCategoria () {
					return this.Categoria;
				}
				
			    public String cnpj;

				public String getCnpj () {
					return this.cnpj;
				}
				
			    public String nome_estabelecimento;

				public String getNome_estabelecimento () {
					return this.nome_estabelecimento;
				}
				
			    public String uf;

				public String getUf () {
					return this.uf;
				}
				
			    public String Cidade;

				public String getCidade () {
					return this.Cidade;
				}
				
			    public String Endereco;

				public String getEndereco () {
					return this.Endereco;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nota_estabelecimento;

				public String getNota_estabelecimento () {
					return this.nota_estabelecimento;
				}
				
			    public String perspectiva_acessibilidade;

				public String getPerspectiva_acessibilidade () {
					return this.perspectiva_acessibilidade;
				}
				
			    public String recurso_acessibilidade;

				public String getRecurso_acessibilidade () {
					return this.recurso_acessibilidade;
				}
				
			    public Boolean possui_recurso;

				public Boolean getPossui_recurso () {
					return this.possui_recurso;
				}
				
			    public String nome_usuario;

				public String getNome_usuario () {
					return this.nome_usuario;
				}
				
			    public String comentario;

				public String getComentario () {
					return this.comentario;
				}
				
			    public String ano;

				public String getAno () {
					return this.ano;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TESTES_INICIAIS_ETL_SAD.length) {
				if(length < 1024 && commonByteArray_TESTES_INICIAIS_ETL_SAD.length == 0) {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[1024];
				} else {
   					commonByteArray_TESTES_INICIAIS_ETL_SAD = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length);
			strReturn = new String(commonByteArray_TESTES_INICIAIS_ETL_SAD, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TESTES_INICIAIS_ETL_SAD) {

        	try {

        		int length = 0;
		
					this.Categoria = readString(dis);
					
					this.cnpj = readString(dis);
					
					this.nome_estabelecimento = readString(dis);
					
					this.uf = readString(dis);
					
					this.Cidade = readString(dis);
					
					this.Endereco = readString(dis);
					
					this.email = readString(dis);
					
					this.nota_estabelecimento = readString(dis);
					
					this.perspectiva_acessibilidade = readString(dis);
					
					this.recurso_acessibilidade = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.possui_recurso = null;
           				} else {
           			    	this.possui_recurso = dis.readBoolean();
           				}
					
					this.nome_usuario = readString(dis);
					
					this.comentario = readString(dis);
					
					this.ano = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Categoria,dos);
					
					// String
				
						writeString(this.cnpj,dos);
					
					// String
				
						writeString(this.nome_estabelecimento,dos);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.Cidade,dos);
					
					// String
				
						writeString(this.Endereco,dos);
					
					// String
				
						writeString(this.email,dos);
					
					// String
				
						writeString(this.nota_estabelecimento,dos);
					
					// String
				
						writeString(this.perspectiva_acessibilidade,dos);
					
					// String
				
						writeString(this.recurso_acessibilidade,dos);
					
					// Boolean
				
						if(this.possui_recurso == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.possui_recurso);
		            	}
					
					// String
				
						writeString(this.nome_usuario,dos);
					
					// String
				
						writeString(this.comentario,dos);
					
					// String
				
						writeString(this.ano,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Categoria="+Categoria);
		sb.append(",cnpj="+cnpj);
		sb.append(",nome_estabelecimento="+nome_estabelecimento);
		sb.append(",uf="+uf);
		sb.append(",Cidade="+Cidade);
		sb.append(",Endereco="+Endereco);
		sb.append(",email="+email);
		sb.append(",nota_estabelecimento="+nota_estabelecimento);
		sb.append(",perspectiva_acessibilidade="+perspectiva_acessibilidade);
		sb.append(",recurso_acessibilidade="+recurso_acessibilidade);
		sb.append(",possui_recurso="+String.valueOf(possui_recurso));
		sb.append(",nome_usuario="+nome_usuario);
		sb.append(",comentario="+comentario);
		sb.append(",ano="+ano);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
saidaXMLStruct saidaXML = new saidaXMLStruct();
saidaJsonStruct saidaJson = new saidaJsonStruct();
saidaExcelStruct saidaExcel = new saidaExcelStruct();
saidaTxtStruct saidaTxt = new saidaTxtStruct();





	
	/**
	 * [tFileOutputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputXML_1", false);
		start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputXML_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("saidaXML" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputXML_1 = 0;
		
    	class BytesLimit65535_tFileOutputXML_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputXML_1().limitLog4jByte();


	String originalFileName_tFileOutputXML_1 = "C:/Users/icaro.prado/Documents/Talend/TOS_DI-20180411_1414-V7.0.1/workspace/Turismo.xml";
	java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1); 

	String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
	java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1); 
	if(!file_tFileOutputXML_1.isAbsolute()) {
		file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
	}

	//create directory only if not exists
	
	file_tFileOutputXML_1.getParentFile().mkdirs();
	
	String[] headers_tFileOutputXML_1 = new String[2];
		
	headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\""+"ISO-8859-15"+"\"?>";  

	String[] footers_tFileOutputXML_1 = new String[1];

	headers_tFileOutputXML_1[1] = "<"+"root"+">";

	footers_tFileOutputXML_1[0] = "</"+"root"+">";


	int nb_line_tFileOutputXML_1 = 0;


	java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(file_tFileOutputXML_1), "ISO-8859-15"));

	out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
	out_tFileOutputXML_1.newLine();	
	out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
	out_tFileOutputXML_1.newLine();	

 



/**
 * [tFileOutputXML_1 begin ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputJSON_1", false);
		start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputJSON_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("saidaJson" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputJSON_1 = 0;
		
    	class BytesLimit65535_tFileOutputJSON_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputJSON_1().limitLog4jByte();
int nb_line_tFileOutputJSON_1 = 0;
java.io.File file_tFileOutputJSON_1 = new java.io.File("C:/Users/icaro.prado/Documents/Talend/TOS_DI-20180411_1414-V7.0.1/workspace/Turismo.json");
java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1.getParentFile();
	if(dir_tFileOutputJSON_1!=null && !dir_tFileOutputJSON_1.exists()){
		dir_tFileOutputJSON_1.mkdirs();
	}
java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter("C:/Users/icaro.prado/Documents/Talend/TOS_DI-20180411_1414-V7.0.1/workspace/Turismo.json")));
	outtFileOutputJSON_1.append("{\"" + "data" + "\":[");
boolean isFirst_tFileOutputJSON_1 = true;
 



/**
 * [tFileOutputJSON_1 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("saidaExcel" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		int nb_line_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Users/icaro.prado/Documents/Talend/TOS_DI-20180411_1414-V7.0.1/workspace/Turismo.xls";
		java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
		boolean isFileGenerated_tFileOutputExcel_1 = true;
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
          if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {
        	
             parentFile_tFileOutputExcel_1.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_1.setEncoding("ISO-8859-15");
		writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)), 
            		true, 
            		workbookSettings_tFileOutputExcel_1);       

        writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet("Hotéis");
        if(writableSheet_tFileOutputExcel_1 == null){
        	writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet("Hotéis", writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
		}
		

        //modif start
        int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_1 = new int[14];
		for(int i_tFileOutputExcel_1=0;i_tFileOutputExcel_1<14;i_tFileOutputExcel_1++){
		    int fitCellViewSize_tFileOutputExcel_1=writableSheet_tFileOutputExcel_1.getColumnView(i_tFileOutputExcel_1).getSize();
			fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]=fitCellViewSize_tFileOutputExcel_1/256;
			if(fitCellViewSize_tFileOutputExcel_1%256!=0){
				fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]+=1;
			}
		}
		


		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */




	
	/**
	 * [tFileOutputRaw_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputRaw_1", false);
		start_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputRaw_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("saidaTxt" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputRaw_1 = 0;
		
    	class BytesLimit65535_tFileOutputRaw_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputRaw_1().limitLog4jByte();


	String fileName_tFileOutputRaw_1 = "C:/Users/icaro.prado/Documents/Talend/TOS_DI-20180411_1414-V7.0.1/workspace/Turismo.txt";
 



/**
 * [tFileOutputRaw_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
saidaXMLStruct saidaXML_tmp = new saidaXMLStruct();
saidaJsonStruct saidaJson_tmp = new saidaJsonStruct();
saidaExcelStruct saidaExcel_tmp = new saidaExcelStruct();
saidaTxtStruct saidaTxt_tmp = new saidaTxtStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Users/icaro.prado/Downloads/201704-turismo-acessivel.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Users/icaro.prado/Downloads/201704-turismo-acessivel.csv", "ISO-8859-15",context.template_ETL_SAD_FieldSeparator,context.template_ETL_SAD_RowSeparator,false,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.Categoria = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.cnpj = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.nome_estabelecimento = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.uf = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.Cidade = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.Endereco = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.email = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.nota_estabelecimento = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.perspectiva_acessibilidade = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.recurso_acessibilidade = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.possui_recurso = ParserUtils.parseTo_Boolean(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"possui_recurso", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.possui_recurso = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.nome_usuario = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.comentario = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1.ano = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

saidaXML = null;
saidaJson = null;
saidaExcel = null;
saidaTxt = null;


// # Output table : 'saidaXML'
saidaXML_tmp.Categoria = row1.Categoria ;
saidaXML_tmp.cnpj = row1.cnpj ;
saidaXML_tmp.nome_estabelecimento = row1.nome_estabelecimento ;
saidaXML_tmp.uf = row1.uf ;
saidaXML_tmp.Cidade = row1.Cidade ;
saidaXML_tmp.Endereco = row1.Endereco ;
saidaXML_tmp.email = row1.email ;
saidaXML_tmp.nota_estabelecimento = row1.nota_estabelecimento ;
saidaXML_tmp.perspectiva_acessibilidade = row1.perspectiva_acessibilidade ;
saidaXML_tmp.recurso_acessibilidade = row1.recurso_acessibilidade ;
saidaXML_tmp.possui_recurso = row1.possui_recurso ;
saidaXML_tmp.nome_usuario = row1.nome_usuario ;
saidaXML_tmp.comentario = row1.comentario ;
saidaXML_tmp.ano = row1.ano ;
saidaXML = saidaXML_tmp;

// # Output table : 'saidaJson'
saidaJson_tmp.Categoria = row1.Categoria ;
saidaJson_tmp.cnpj = row1.cnpj ;
saidaJson_tmp.nome_estabelecimento = row1.nome_estabelecimento ;
saidaJson_tmp.uf = row1.uf ;
saidaJson_tmp.Cidade = row1.Cidade ;
saidaJson_tmp.Endereco = row1.Endereco ;
saidaJson_tmp.email = row1.email ;
saidaJson_tmp.nota_estabelecimento = row1.nota_estabelecimento ;
saidaJson_tmp.perspectiva_acessibilidade = row1.perspectiva_acessibilidade ;
saidaJson_tmp.recurso_acessibilidade = row1.recurso_acessibilidade ;
saidaJson_tmp.possui_recurso = row1.possui_recurso ;
saidaJson_tmp.nome_usuario = row1.nome_usuario ;
saidaJson_tmp.comentario = row1.comentario ;
saidaJson_tmp.ano = row1.ano ;
saidaJson = saidaJson_tmp;

// # Output table : 'saidaExcel'
saidaExcel_tmp.Categoria = row1.Categoria ;
saidaExcel_tmp.cnpj = row1.cnpj ;
saidaExcel_tmp.nome_estabelecimento = row1.nome_estabelecimento ;
saidaExcel_tmp.uf = row1.uf ;
saidaExcel_tmp.Cidade = row1.Cidade ;
saidaExcel_tmp.Endereco = row1.Endereco ;
saidaExcel_tmp.email = row1.email ;
saidaExcel_tmp.nota_estabelecimento = row1.nota_estabelecimento ;
saidaExcel_tmp.perspectiva_acessibilidade = row1.perspectiva_acessibilidade ;
saidaExcel_tmp.recurso_acessibilidade = row1.recurso_acessibilidade ;
saidaExcel_tmp.possui_recurso = row1.possui_recurso ;
saidaExcel_tmp.nome_usuario = row1.nome_usuario ;
saidaExcel_tmp.comentario = row1.comentario ;
saidaExcel_tmp.ano = row1.ano ;
saidaExcel = saidaExcel_tmp;

// # Output table : 'saidaTxt'
saidaTxt_tmp.Categoria = row1.Categoria ;
saidaTxt_tmp.cnpj = row1.cnpj ;
saidaTxt_tmp.nome_estabelecimento = row1.nome_estabelecimento ;
saidaTxt_tmp.uf = row1.uf ;
saidaTxt_tmp.Cidade = row1.Cidade ;
saidaTxt_tmp.Endereco = row1.Endereco ;
saidaTxt_tmp.email = row1.email ;
saidaTxt_tmp.nota_estabelecimento = row1.nota_estabelecimento ;
saidaTxt_tmp.perspectiva_acessibilidade = row1.perspectiva_acessibilidade ;
saidaTxt_tmp.recurso_acessibilidade = row1.recurso_acessibilidade ;
saidaTxt_tmp.possui_recurso = row1.possui_recurso ;
saidaTxt_tmp.nome_usuario = row1.nome_usuario ;
saidaTxt_tmp.comentario = row1.comentario ;
saidaTxt_tmp.ano = row1.ano ;
saidaTxt = saidaTxt_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "saidaXML"
if(saidaXML != null) { 



	
	/**
	 * [tFileOutputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

			//saidaXML
			//saidaXML


			
				if(execStat){
					runStat.updateStatOnConnection("saidaXML"+iterateId,1, 1);
				} 
			

		

StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<"+"row");
tempRes_tFileOutputXML_1.append(">");
out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"Categoria"+">"+((saidaXML.Categoria == null)?"":(TalendString.checkCDATAForXML(saidaXML.Categoria)))+"</"+"Categoria"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"cnpj"+">"+((saidaXML.cnpj == null)?"":(TalendString.checkCDATAForXML(saidaXML.cnpj)))+"</"+"cnpj"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"nome_estabelecimento"+">"+((saidaXML.nome_estabelecimento == null)?"":(TalendString.checkCDATAForXML(saidaXML.nome_estabelecimento)))+"</"+"nome_estabelecimento"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"uf"+">"+((saidaXML.uf == null)?"":(TalendString.checkCDATAForXML(saidaXML.uf)))+"</"+"uf"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"Cidade"+">"+((saidaXML.Cidade == null)?"":(TalendString.checkCDATAForXML(saidaXML.Cidade)))+"</"+"Cidade"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"Endereco"+">"+((saidaXML.Endereco == null)?"":(TalendString.checkCDATAForXML(saidaXML.Endereco)))+"</"+"Endereco"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"email"+">"+((saidaXML.email == null)?"":(TalendString.checkCDATAForXML(saidaXML.email)))+"</"+"email"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"nota_estabelecimento"+">"+((saidaXML.nota_estabelecimento == null)?"":(TalendString.checkCDATAForXML(saidaXML.nota_estabelecimento)))+"</"+"nota_estabelecimento"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"perspectiva_acessibilidade"+">"+((saidaXML.perspectiva_acessibilidade == null)?"":(TalendString.checkCDATAForXML(saidaXML.perspectiva_acessibilidade)))+"</"+"perspectiva_acessibilidade"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"recurso_acessibilidade"+">"+((saidaXML.recurso_acessibilidade == null)?"":(TalendString.checkCDATAForXML(saidaXML.recurso_acessibilidade)))+"</"+"recurso_acessibilidade"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"possui_recurso"+">"+((saidaXML.possui_recurso == null)?"":(saidaXML.possui_recurso))+"</"+"possui_recurso"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"nome_usuario"+">"+((saidaXML.nome_usuario == null)?"":(TalendString.checkCDATAForXML(saidaXML.nome_usuario)))+"</"+"nome_usuario"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"comentario"+">"+((saidaXML.comentario == null)?"":(TalendString.checkCDATAForXML(saidaXML.comentario)))+"</"+"comentario"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("<"+"ano"+">"+((saidaXML.ano == null)?"":(TalendString.checkCDATAForXML(saidaXML.ano)))+"</"+"ano"+">");

out_tFileOutputXML_1.newLine();
out_tFileOutputXML_1.write("</"+"row"+">");

out_tFileOutputXML_1.newLine();


nb_line_tFileOutputXML_1++;

 


	tos_count_tFileOutputXML_1++;

/**
 * [tFileOutputXML_1 main ] stop
 */
	
	/**
	 * [tFileOutputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

 



/**
 * [tFileOutputXML_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

 



/**
 * [tFileOutputXML_1 process_data_end ] stop
 */

} // End of branch "saidaXML"




// Start of branch "saidaJson"
if(saidaJson != null) { 



	
	/**
	 * [tFileOutputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

			//saidaJson
			//saidaJson


			
				if(execStat){
					runStat.updateStatOnConnection("saidaJson"+iterateId,1, 1);
				} 
			

		


org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
			    	if(saidaJson.Categoria != null){
			    
					jsonRowtFileOutputJSON_1.put("Categoria", saidaJson.Categoria);
				
					}else{
						jsonRowtFileOutputJSON_1.put("Categoria", null);
					}
				
			    	if(saidaJson.cnpj != null){
			    
					jsonRowtFileOutputJSON_1.put("cnpj", saidaJson.cnpj);
				
					}else{
						jsonRowtFileOutputJSON_1.put("cnpj", null);
					}
				
			    	if(saidaJson.nome_estabelecimento != null){
			    
					jsonRowtFileOutputJSON_1.put("nome_estabelecimento", saidaJson.nome_estabelecimento);
				
					}else{
						jsonRowtFileOutputJSON_1.put("nome_estabelecimento", null);
					}
				
			    	if(saidaJson.uf != null){
			    
					jsonRowtFileOutputJSON_1.put("uf", saidaJson.uf);
				
					}else{
						jsonRowtFileOutputJSON_1.put("uf", null);
					}
				
			    	if(saidaJson.Cidade != null){
			    
					jsonRowtFileOutputJSON_1.put("Cidade", saidaJson.Cidade);
				
					}else{
						jsonRowtFileOutputJSON_1.put("Cidade", null);
					}
				
			    	if(saidaJson.Endereco != null){
			    
					jsonRowtFileOutputJSON_1.put("Endereco", saidaJson.Endereco);
				
					}else{
						jsonRowtFileOutputJSON_1.put("Endereco", null);
					}
				
			    	if(saidaJson.email != null){
			    
					jsonRowtFileOutputJSON_1.put("email", saidaJson.email);
				
					}else{
						jsonRowtFileOutputJSON_1.put("email", null);
					}
				
			    	if(saidaJson.nota_estabelecimento != null){
			    
					jsonRowtFileOutputJSON_1.put("nota_estabelecimento", saidaJson.nota_estabelecimento);
				
					}else{
						jsonRowtFileOutputJSON_1.put("nota_estabelecimento", null);
					}
				
			    	if(saidaJson.perspectiva_acessibilidade != null){
			    
					jsonRowtFileOutputJSON_1.put("perspectiva_acessibilidade", saidaJson.perspectiva_acessibilidade);
				
					}else{
						jsonRowtFileOutputJSON_1.put("perspectiva_acessibilidade", null);
					}
				
			    	if(saidaJson.recurso_acessibilidade != null){
			    
					jsonRowtFileOutputJSON_1.put("recurso_acessibilidade", saidaJson.recurso_acessibilidade);
				
					}else{
						jsonRowtFileOutputJSON_1.put("recurso_acessibilidade", null);
					}
				
			    	if(saidaJson.possui_recurso != null){
			    
					jsonRowtFileOutputJSON_1.put("possui_recurso", saidaJson.possui_recurso);
				
					}else{
						jsonRowtFileOutputJSON_1.put("possui_recurso", null);
					}
				
			    	if(saidaJson.nome_usuario != null){
			    
					jsonRowtFileOutputJSON_1.put("nome_usuario", saidaJson.nome_usuario);
				
					}else{
						jsonRowtFileOutputJSON_1.put("nome_usuario", null);
					}
				
			    	if(saidaJson.comentario != null){
			    
					jsonRowtFileOutputJSON_1.put("comentario", saidaJson.comentario);
				
					}else{
						jsonRowtFileOutputJSON_1.put("comentario", null);
					}
				
			    	if(saidaJson.ano != null){
			    
					jsonRowtFileOutputJSON_1.put("ano", saidaJson.ano);
				
					}else{
						jsonRowtFileOutputJSON_1.put("ano", null);
					}
				

if(!isFirst_tFileOutputJSON_1){
	outtFileOutputJSON_1.append(",");
}
isFirst_tFileOutputJSON_1 = false;
outtFileOutputJSON_1.append(jsonRowtFileOutputJSON_1.toJSONString());
nb_line_tFileOutputJSON_1++;

 


	tos_count_tFileOutputJSON_1++;

/**
 * [tFileOutputJSON_1 main ] stop
 */
	
	/**
	 * [tFileOutputJSON_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputJSON_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 process_data_end ] stop
 */

} // End of branch "saidaJson"




// Start of branch "saidaExcel"
if(saidaExcel != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//saidaExcel
			//saidaExcel


			
				if(execStat){
					runStat.updateStatOnConnection("saidaExcel"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(saidaExcel.Categoria != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.Categoria
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
							int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>currentWith_0_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[0]:currentWith_0_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.cnpj != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.cnpj
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
							int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>currentWith_1_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[1]:currentWith_1_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.nome_estabelecimento != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.nome_estabelecimento
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
							int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>currentWith_2_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[2]:currentWith_2_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.uf != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.uf
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
							int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>currentWith_3_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[3]:currentWith_3_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.Cidade != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.Cidade
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_4_tFileOutputExcel_1);
							int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>currentWith_4_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[4]:currentWith_4_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.Endereco != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.Endereco
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_5_tFileOutputExcel_1);
							int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>currentWith_5_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[5]:currentWith_5_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.email != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.email
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_6_tFileOutputExcel_1);
							int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>currentWith_6_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[6]:currentWith_6_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.nota_estabelecimento != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.nota_estabelecimento
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_7_tFileOutputExcel_1);
							int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>currentWith_7_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[7]:currentWith_7_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.perspectiva_acessibilidade != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.perspectiva_acessibilidade
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_8_tFileOutputExcel_1);
							int currentWith_8_tFileOutputExcel_1 = cell_8_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>currentWith_8_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[8]:currentWith_8_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.recurso_acessibilidade != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.recurso_acessibilidade
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_9_tFileOutputExcel_1);
							int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>currentWith_9_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[9]:currentWith_9_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.possui_recurso != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Boolean(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.possui_recurso
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_10_tFileOutputExcel_1);
							int currentWith_10_tFileOutputExcel_1 = cell_10_tFileOutputExcel_1.getContents().trim().length();
							currentWith_10_tFileOutputExcel_1=5;
							fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>currentWith_10_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[10]:currentWith_10_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.nome_usuario != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.nome_usuario
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_11_tFileOutputExcel_1);
							int currentWith_11_tFileOutputExcel_1 = cell_11_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>currentWith_11_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[11]:currentWith_11_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.comentario != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.comentario
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_12_tFileOutputExcel_1);
							int currentWith_12_tFileOutputExcel_1 = cell_12_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>currentWith_12_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[12]:currentWith_12_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(saidaExcel.ano != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								saidaExcel.ano
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_13_tFileOutputExcel_1);
							int currentWith_13_tFileOutputExcel_1 = cell_13_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>currentWith_13_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[13]:currentWith_13_tFileOutputExcel_1+2;
	    				} 
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "saidaExcel"




// Start of branch "saidaTxt"
if(saidaTxt != null) { 



	
	/**
	 * [tFileOutputRaw_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputRaw_1";

	

			//saidaTxt
			//saidaTxt


			
				if(execStat){
					runStat.updateStatOnConnection("saidaTxt"+iterateId,1, 1);
				} 
			

		

				try {
					Object content_tFileOutputRaw_1 = saidaTxt.Categoria;

					if(content_tFileOutputRaw_1 != null) {
						java.io.File file_tFileOutputRaw_1=new java.io.File(fileName_tFileOutputRaw_1);
						java.io.File parentFile_tFileOutputRaw_1=file_tFileOutputRaw_1.getParentFile();
						if(parentFile_tFileOutputRaw_1!=null && !parentFile_tFileOutputRaw_1.exists()){
							parentFile_tFileOutputRaw_1.mkdirs();
						}
						if(content_tFileOutputRaw_1 instanceof String) {
							org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_1, content_tFileOutputRaw_1.toString(), "ISO-8859-15");
						} else if(content_tFileOutputRaw_1 instanceof byte[]) {
							org.apache.commons.io.FileUtils.writeByteArrayToFile(file_tFileOutputRaw_1, (byte[])content_tFileOutputRaw_1);
						} else if(content_tFileOutputRaw_1 instanceof java.io.InputStream) {
							java.io.InputStream fis_tFileOutputRaw_1 = (java.io.InputStream) content_tFileOutputRaw_1;
							java.io.FileOutputStream fos_tFileOutputRaw_1 = new java.io.FileOutputStream(file_tFileOutputRaw_1);
							byte[] buffer_tFileOutputRaw_1 = new byte[65536];
							int nb_tFileOutputRaw_1 = 0;
							while (true) {
							      nb_tFileOutputRaw_1 = fis_tFileOutputRaw_1.read(buffer_tFileOutputRaw_1);
							      if (nb_tFileOutputRaw_1 == -1) {
							      	 break;
							      }		 
							      fos_tFileOutputRaw_1.write(buffer_tFileOutputRaw_1, 0, nb_tFileOutputRaw_1);
							}
							fis_tFileOutputRaw_1.close();
							fos_tFileOutputRaw_1.close();
						} else {
						    org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_1, content_tFileOutputRaw_1.toString(), "ISO-8859-15");
						}
					}
				} catch (java.lang.Exception e_tFileOutputRaw_1) {
						System.err.println(e_tFileOutputRaw_1);
				}
 


	tos_count_tFileOutputRaw_1++;

/**
 * [tFileOutputRaw_1 main ] stop
 */
	
	/**
	 * [tFileOutputRaw_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputRaw_1";

	

 



/**
 * [tFileOutputRaw_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputRaw_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputRaw_1";

	

 



/**
 * [tFileOutputRaw_1 process_data_end ] stop
 */

} // End of branch "saidaTxt"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Users/icaro.prado/Downloads/201704-turismo-acessivel.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

	out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

	out_tFileOutputXML_1.newLine();
	out_tFileOutputXML_1.close();
globalMap.put("tFileOutputXML_1_NB_LINE",nb_line_tFileOutputXML_1);
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("saidaXML"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputXML_1", true);
end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());




/**
 * [tFileOutputXML_1 end ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

	outtFileOutputJSON_1.print("]}");
outtFileOutputJSON_1.close();
globalMap.put("tFileOutputJSON_1_NB_LINE",nb_line_tFileOutputJSON_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("saidaJson"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputJSON_1", true);
end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());




/**
 * [tFileOutputJSON_1 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

		writeableWorkbook_tFileOutputExcel_1.write();
		writeableWorkbook_tFileOutputExcel_1.close();
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("saidaExcel"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */




	
	/**
	 * [tFileOutputRaw_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputRaw_1";

	


	globalMap.put("tFileOutputRaw_1_FILENAME_PATH", fileName_tFileOutputRaw_1);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("saidaTxt"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputRaw_1", true);
end_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());




/**
 * [tFileOutputRaw_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputXML_1";

	

 



/**
 * [tFileOutputXML_1 finally ] stop
 */




	
	/**
	 * [tFileOutputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */




	
	/**
	 * [tFileOutputRaw_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputRaw_1";

	

 



/**
 * [tFileOutputRaw_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ETL_SAD ETL_SADClass = new ETL_SAD();

        int exitCode = ETL_SADClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ETL_SAD.class.getClassLoader().getResourceAsStream("testes_iniciais/etl_sad_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ETL_SAD.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("template_ETL_SAD_RowSeparator", "id_String");
				
                context.template_ETL_SAD_RowSeparator=(String) context.getProperty("template_ETL_SAD_RowSeparator");
				    context.setContextType("template_ETL_SAD_Encoding", "id_String");
				
                context.template_ETL_SAD_Encoding=(String) context.getProperty("template_ETL_SAD_Encoding");
				    context.setContextType("template_ETL_SAD_File", "id_File");
				
                context.template_ETL_SAD_File=(String) context.getProperty("template_ETL_SAD_File");
				    context.setContextType("template_ETL_SAD_FieldSeparator", "id_String");
				
                context.template_ETL_SAD_FieldSeparator=(String) context.getProperty("template_ETL_SAD_FieldSeparator");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("template_ETL_SAD_RowSeparator")) {
                context.template_ETL_SAD_RowSeparator = (String) parentContextMap.get("template_ETL_SAD_RowSeparator");
            }if (parentContextMap.containsKey("template_ETL_SAD_Encoding")) {
                context.template_ETL_SAD_Encoding = (String) parentContextMap.get("template_ETL_SAD_Encoding");
            }if (parentContextMap.containsKey("template_ETL_SAD_File")) {
                context.template_ETL_SAD_File = (String) parentContextMap.get("template_ETL_SAD_File");
            }if (parentContextMap.containsKey("template_ETL_SAD_FieldSeparator")) {
                context.template_ETL_SAD_FieldSeparator = (String) parentContextMap.get("template_ETL_SAD_FieldSeparator");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL_SAD");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     112318 characters generated by Talend Open Studio for Data Integration 
 *     on the 17 de Agosto de 2018 16h52min27s GMT-03:00
 ************************************************************************************************/